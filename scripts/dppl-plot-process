#!/usr/bin/env python3

import matplotlib.pyplot as plt
import sys
import math
import argparse
import numpy as np


parser = argparse.ArgumentParser(
    description="Plot Miking DPPL stochastic process from standard input. The samples are assumed to be on the form [[t1, x1], [t1, x2], ..., [tn, xn]], where ti are timestamps and xi the value at this time."
)

parser.add_argument("-m", "--mean", action="store_true", help="Plot mean")
parser.add_argument("-e", "--median", action="store_true", help="Plot median")
parser.add_argument(
    "-d",
    "--std",
    action="store_true",
    help="Plot standard deviation",
)
parser.add_argument(
    "-l",
    "--lines",
    action="store_true",
    help="Plot all trace samples as lines. More computationally heavy for large samples sizes.",
)
parser.add_argument(
    "-a",
    "--alpha-scale",
    type=float,
    default=10,
    help="The alpha for each sample line is computed as alpha-scale*prob(sample). Default is 10",
)
parser.add_argument(
    "file",
    nargs="?",
    type=argparse.FileType("r"),
    default=sys.stdin,
    help="File with samples (default: standard input)",
)

args = parser.parse_args()


def plot_traces(ax, ws, ts, traces, color, label, first_plot=True):
    if args.lines:
        for i, trace in enumerate(traces):
            ax.plot(
                ts,
                trace,
                color=color,
                alpha=min(1, args.alpha_scale * ws[i]),
                label=f"{label}" if i == 0 else None,
            )

    else:
        # finding percentiles
        pcts = np.array([45, 40, 35, 30, 25, 20, 15, 10, 5])
        layers = np.empty([len(ts), len(pcts), 2])
        for t in range(len(ts)):
            for p in range(len(pcts)):
                layers[t, p] = np.percentile(
                    traces[:, t], [100 - pcts[p], pcts[p]]
                )

        # plot the layers
        for i in range(len(pcts)):
            if i == 0:
                ax.fill_between(
                    ts,
                    layers[:, i, 0],
                    layers[:, i, 1],
                    color=color,
                    alpha=pcts[i] * 0.01,
                    label=f"{label}: {pcts[i]}%" if first_plot else f"{label}",
                )
            else:
                ax.fill_between(
                    ts,
                    layers[:, i - 1, 0],
                    layers[:, i, 0],
                    color=color,
                    alpha=pcts[i] * 0.01,
                    label=f"{label}: {pcts[i]}%" if first_plot else None,
                )
                ax.fill_between(
                    ts,
                    layers[:, i - 1, 1],
                    layers[:, i, 1],
                    color=color,
                    alpha=pcts[i] * 0.01,
                )

    # Plot median
    if args.median:
        ax.plot(
            ts,
            np.median(traces, axis=0),
            color="purple",
            linestyle="-",
            label="median" if first_plot else None,
        )

    # Plot mean
    if args.mean:
        ax.plot(
            ts,
            np.mean(traces, axis=0),
            color="red",
            linestyle="-",
            label="mean" if first_plot else None,
        )

    # Plot standard deviation
    if args.std:
        std = np.std(traces, axis=0)
        ax.plot(
            ts,
            std,
            color="red",
            linestyle="--",
            alpha=0.5,
            label="std" if first_plot else None,
        )


colors = ["blue", "green", "orange", "gray", "yellow"]

with args.file as file:
    line_number = 0
    lws = []
    plots = {}
    for line in file:
        line_number += 1

        if line_number > 1:
            data, lw = line.split(" ")
            lws.append(float(lw))

            data = [
                [
                    [
                        float(substr.split(",[")[0].strip("[]()")),
                        [
                            float(substr)
                            for substr in substr.split(",[")[1]
                            .strip("[]()")
                            .split(",")
                        ],
                    ]
                    for substr in substr.split("),(")
                ]
                for substr in data.split("],[")
            ]

            for i, data in enumerate(data):
                for data_points in data:
                    for j, data_point in enumerate(data_points[1]):
                        plots.setdefault(i, {}).setdefault(j, {}).setdefault(
                            data_points[0], []
                        ).append(data_point)

    ws = np.exp(np.asarray(lws))

    fig, axs = plt.subplots(len(plots))

    for p, traces in enumerate(plots.values()):
        ax = axs if len(plots) == 1 else axs[p]
        for i, traces in enumerate(traces.values()):
            ts = np.asarray(list(traces.keys()))
            traces = np.asarray(list(traces.values()))
            plot_traces(
                ax,
                ws,
                ts,
                traces.T,
                colors[i % len(colors)],
                i,
                first_plot=True if i == 0 else False,
            )

        legend = ax.legend()

        # Set alpha to 1 if we are plotting lines to make them visible
        if args.lines:
            for lh in legend.legend_handles:
                lh.set_alpha(1)

        ax.set_xlabel("t")

        ax.grid(
            True,
            which="major",
            linestyle="-",
            linewidth=0.5,
            color="gray",
            alpha=0.5,
        )

        ax.grid(
            True,
            which="minor",
            linestyle="--",
            linewidth=0.5,
            color="gray",
            alpha=0.2,
        )

        ax.minorticks_on()

    plt.show()
